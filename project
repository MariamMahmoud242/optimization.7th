import numpy as np
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

class LogisticRegression:
    def __init__(self, lr=0.01, epochs=20, optimizer='gd', batch_size=32):
        self.lr = lr
        self.epochs = epochs
        self.optimizer = optimizer
        self.batch_size = batch_size

    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))

    def fit(self, X, y):
        m, n = X.shape
        self.w = np.zeros(n)
        self.b = 0

        for epoch in range(self.epochs):
            if self.optimizer == 'gd':
                self._update(X, y)
            elif self.optimizer == 'sgd':
                for i in range(m):
                    self._update(X[i:i+1], y[i:i+1])
            elif self.optimizer == 'mbgd':
                for i in range(0, m, self.batch_size):
                    self._update(X[i:i+self.batch_size], y[i:i+self.batch_size])

            y_hat = self.predict_proba(X)
            loss = -np.mean(y * np.log(y_hat + 1e-15) + (1 - y) * np.log(1 - y_hat + 1e-15))
            print(f"Epoch {epoch+1}: Loss = {loss:.4f}")

    def _update(self, X, y):
        m = len(y)
        y_hat = self.sigmoid(np.dot(X, self.w) + self.b)
        dw = np.dot(X.T, (y_hat - y)) / m
        db = np.sum(y_hat - y) / m
        self.w -= self.lr * dw
        self.b -= self.lr * db

    def predict_proba(self, X):
        return self.sigmoid(np.dot(X, self.w) + self.b)

    def predict(self, X):
        return (self.predict_proba(X) >= 0.5).astype(int)

X, y = make_classification(n_samples=1000, n_features=10, n_classes=2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

optimizers = ['gd', 'sgd', 'mbgd']

for opt in optimizers:
    print(f"\n--- Optimizer: {opt.upper()} ---")
    model = LogisticRegression(lr=0.01, epochs=20, optimizer=opt, batch_size=32)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Precision:", precision_score(y_test, y_pred))
    print("Recall:", recall_score(y_test, y_pred))
    print("F1 Score:", f1_score(y_test, y_pred))
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
